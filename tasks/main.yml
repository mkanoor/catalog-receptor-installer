---
- name: Get Version of python3
  command: python3 --version
  register: py_cmd
  changed_when: False
- name: Set the python3 version
  set_fact:
    python3_version: "{{ py_cmd.stdout.split(' ')[-1] }}"
- name: Check the version of python running
  fail:
    msg: "You are running python3 version {{ python3_version }} you need to have version 3.6.0 or above"
  when: python3_version is version('3.6.0', '<')
- name: Register with Redhat
  include_tasks: subscribe.yml
- name: Perform QA specific tasks
  include_tasks: qa_tasks.yml
  when: qa_repo is defined
- name: Preflight checks
  block:
    - name: Set the Tower URL
      set_fact:
        tower_url: "{{ tower_url | regex_replace('\\/$', '') }}"
    - name: "Can connect to {{ c_rh_c_host }}"
      uri:
        url: "https://{{ c_rh_c_host }}/api"
      environment:
        http_proxy: "{{ http_proxy }}"
    - name: Receptor configuration directory exists
      file:
        path: "{{ receptor_config_dir }}"
        state: directory
    - name: Receptor data directory exists
      file:
        path: "{{ receptor_data_dir }}"
        state: directory
    - name: Get Client Certificate stats
      stat:
        path: "{{ system_cert_file }}"
      register: cert_details
    - name: Check the Certificate stats
      fail:
        msg: "You need to register your system using subscription manager"
      when: not cert_details.stat.exists
    - name: Get Client Key stats
      stat:
        path: "{{ system_key_file }}"
      register: key_details
    - name: Check the Key file stats
      fail:
        msg: "You need to register your system using subscription manager"
      when: not key_details.stat.exists
    - name: Install jmespath on RHEL7 only
      yum:
        name: python2-jmespath
        state: installed
      become: yes
      when: ansible_distribution == "RedHat" and ansible_distribution_major_version == '7'
    - name: Check if systemd is available
      command: pgrep systemd
      register: cmd_output
      ignore_errors: yes
    - name: Set the use systemd flag
      set_fact:
        use_systemd: true
      when: cmd_output.rc == 0
- name: Get Ansible Tower Info using tokens
  include_tasks: ansible_tower_tasks_with_token.yml
  when: tower_token | length > 0
- name: Get Ansible Tower Info using userid/password
  include_tasks: ansible_tower_tasks_with_userid_password.yml
  when: tower_token | length == 0
- name: Install Receptor and Ansible Tower Plugin RPMs
  block:
  - name: Check if the packages are available
    command:
      cmd: "yum info {{ item }}"
      warn: false
    loop: "{{ receptor_packages }}"
  - name: Install Receptor and Catalog Plugin RPMs
    yum:
      name: "{{ receptor_packages }}"
      state: installed
    become: yes
  when: install_receptor_from_rpm|bool
- name: Extract account information from Ansible Tower and write configs
  block:
  - name: Extract Tower ID from result
    set_fact:
      tower_uuid: "{{ tower_uuid_json | json_query('json.install_uuid') }}"
  - name: Get source ids
    include_tasks: get_source_ids.yml
  - name: Get existing source info
    include_tasks: get_existing_sources.yml
  - name: Create required files
    include_tasks: create_files.yml
  tags: query_ansible
- name: Register Ansible Tower and Receptor with Sources
  block:
  - name: Gather installed account dirs
    find:
      file_type: directory
      paths: "{{ receptor_config_dir }}"
      patterns: "rh_ansible_*"
    register: account_dirs_full_path
  - name: Extract account dirs
    set_fact:
      account_dirs: "{{ account_dirs_full_path | json_query('files[*].path') | map('basename') | list }}"
  - name: Set up Source with c.rh.c for each account
    include_tasks: register_with_sources.yml
    loop: "{{ account_dirs }}"
    loop_control:
      loop_var: account_dir
  tags: register_with_sources
- name: Generate Shell Scripts
  include_tasks: use_local_script.yml
  when: use_systemd is not defined
- name: Run with systemd
  include_tasks: use_systemd.yml
  when: use_systemd is defined
